{
    "docs": [
        {
            "location": "/", 
            "text": "Documentaci\u00f3n de Geoladris\n\n\nUsuario\n\n\n\n\nGu\u00eda r\u00e1pida\n.\n\n\nConfiguraci\u00f3n de aplicaciones\n.\n\n\nCreaci\u00f3n de aplicaciones\n.\n\n\n\n\nDesarrollador\n\n\n\n\nC\u00f3digo fuente\n.\n\n\nGu\u00eda r\u00e1pida\n.\n\n\nPlugins\n.\n\n\nAplicaciones\n.\n\n\nMigraci\u00f3n\n.\n\n\nContribuir\n.\n\n\nDesarrolar con Eclipse\n.\n\n\n\n\nReferencia\n\n\n\n\nRegistro de cambios\n.\n\n\nPlugins\n.\n\n\nEventos\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#documentacion-de-geoladris", 
            "text": "", 
            "title": "Documentaci\u00f3n de Geoladris"
        }, 
        {
            "location": "/#usuario", 
            "text": "Gu\u00eda r\u00e1pida .  Configuraci\u00f3n de aplicaciones .  Creaci\u00f3n de aplicaciones .", 
            "title": "Usuario"
        }, 
        {
            "location": "/#desarrollador", 
            "text": "C\u00f3digo fuente .  Gu\u00eda r\u00e1pida .  Plugins .  Aplicaciones .  Migraci\u00f3n .  Contribuir .  Desarrolar con Eclipse .", 
            "title": "Desarrollador"
        }, 
        {
            "location": "/#referencia", 
            "text": "Registro de cambios .  Plugins .  Eventos .", 
            "title": "Referencia"
        }, 
        {
            "location": "/user/quickstart/", 
            "text": "Descargar aplicaci\u00f3n demo\n\n\nDesplegar en Tomcat\n\n\nAbrir navegador\n\n\nModificar algo de configuraci\u00f3n\n\n\nRecargar visor\n\n\nSiguientes pasos", 
            "title": "Gu\u00eda r\u00e1pida"
        }, 
        {
            "location": "/user/config/", 
            "text": "Configurar directorio en Tomcat\n\n\nGEOLADRIS_CONFIG_DIR\n\n\nPORTAL_CONFIG_DIR (deprecado).\n\n\n\n\n\n\nContenido del directorio\n\n\nportal.properties\n\n\npublic-conf.json\n\n\nplugin-conf.json (deprecado)\n\n\nmessages.properties\n\n\nrole_conf\n\n\nstatic\n\n\nplugins\n\n\n\n\n\n\nConfigurar cach\u00e9\n\n\nGEOLADRIS_CONFIG_CACHE\n\n\nGEOLADRIS_CACHE_TIMEOUT", 
            "title": "Configuraci\u00f3n de aplicaciones"
        }, 
        {
            "location": "/user/create/", 
            "text": "geoladris_build.sh", 
            "title": "Creaci\u00f3n de aplicaciones"
        }, 
        {
            "location": "/dev/source_code/", 
            "text": "Herramientas y tecnolog\u00edas (yarn, Maven, etc.)\n\n\nRepositorios Git\n\n\n\n\nModelo de ramas. Revisar doc:\n\n\n\n\nGeoServer\n\n\ngitflow\n\n\ncactus", 
            "title": "C\u00f3digo fuente"
        }, 
        {
            "location": "/dev/quickstart/", 
            "text": "Clonar repos\n\n\nmvn install\n\n\nEmpaquetar app\n\n\nProbar en Tomcat", 
            "title": "Gu\u00eda r\u00e1pida"
        }, 
        {
            "location": "/dev/plugins/", 
            "text": "Servidor\n\n\nJava\n\n\nAPI Servlet 3.0\n\n\n\n\n\n\nCliente\n\n\nEstructura de directorios\n\n\nCosas propias de los plugins de Geoladris (yarn, karma, etc)\n\n\n\n\n\n\nH\u00edbridos\n\n\nAviso mala pr\u00e1ctica. Java y JS mezclado.\n\n\n\n\n\n\n\n\nDe geoladris-core \ndoc\n.", 
            "title": "Plugins"
        }, 
        {
            "location": "/dev/apps/", 
            "text": "Menci\u00f3n a \ngeoladris_build.sh\n.\n\n\nEstructura de directorios\n\n\n\n\nDependencias:\n\n\n\n\npom.xml\n\n\npackage.json\n\n\n\n\n\n\n\n\nmvn package", 
            "title": "Aplicaciones"
        }, 
        {
            "location": "/dev/migrate/", 
            "text": "Migrando a la versi\u00f3n 6.x\n\n\nA partir de la versi\u00f3n 6.0.0, todos los plugins deben contenterse en un subdirectorio con el nombre del plugin, dentro de \ngeoladris\n o \nplugins\n (en funci\u00f3n de su empaquetado; ver \nplugins\n).\n\n\nPlugins empaquetados como \n.jar\n\n\nAnteriormente, los recursos de un plugin empaquetado como jar estaban directamente dentro de \ngeoladris\n, por lo que un plugin de este tipo que funciona con la versi\u00f3n 5.0.0 no ser\u00e1 v\u00e1lido para la versi\u00f3n 6.0.0.\n\n\nPara migrar a la versi\u00f3n 6.x bastar\u00e1 con crear un subdirectorio con el nombre de nuestro plugin dentro de \ngeoladris\n y mover todos los recursos ah\u00ed.\n\n\nPor ejemplo, para un plugin empaquetado como jar, en la versi\u00f3n 5.0.0 tendr\u00edamos algo como esto:\n\n\n\n\nque deber\u00edamos transformar a:\n\n\n\n\nModuleConfigurationProviders\n\n\nEn el caso de que se hayan desarrollado \nModuleConfigurationProvider\n propios, estos deben a\u00f1adirse a la aplicaci\u00f3n de manera distinta. Anteriormente se a\u00f1ad\u00edan a un objeto \nConfig\n en un \nServletContextListener\n:\n\n\n@Override\npublic void contextInitialized(ServletContextEvent sce) {\n  Config config = (Config)\n    sce.getServletContext().getAttribute(AppContextListener.ATTR_CONFIG);\n  config.addModuleConfigurationProvider(new LayersModuleConfigurationProvider());\n}\n\n\n\n\nAhora se a\u00f1aden directamente a una lista en el \nServletContext\n:\n\n\n@SuppressWarnings(\nunchecked\n)\n@Override\npublic void contextInitialized(ServletContextEvent sce) {\n  List\nModuleConfigurationProvider\n providers = (List\nModuleConfigurationProvider\n)\n    sce.getServletContext().getAttribute(Geoladris.ATTR_CONFIG_PROVIDERS);\n  providers.add(new LayersModuleConfigurationProvider());\n}\n\n\n\n\nPlugins empaquetados en el directorio de configuraci\u00f3n\n\n\nEn este caso, los plugins ya estaban dentro de un subdirectorio de \nplugins\n en la versi\u00f3n 5.x, por lo que funcionar\u00e1n en la versi\u00f3n 6.x sin ning\u00fan cambio.\n\n\nMigrando a la versi\u00f3n 7.x\n\n\nPlugins\n\n\nLa estructura de los plugins cliente ha cambiado completamente (ver \nplugins\n). Para la migraci\u00f3n habr\u00eda que:\n\n\n\n\nMover m\u00f3dulos de \nsrc/main/resources/geoladris/\nplugin\n/modules\n a \nsrc\n.\n\n\nGestionar las dependencias con \npackage.json\n/\nyarn\n.\n\n\n\n\nTodav\u00eda es posible gestionar las dependencias de manera manual (en \njslib\n en lugar de \nsrc/main/resources/geoladris/\nplugin\n/jslib\n), aunque en un futuro esta opci\u00f3n desaparecer\u00e1.\n\n\nAplicaciones\n\n\nLas dependencias de las aplicaciones se gestionan ahora conjuntamente con Maven y \nyarn\n (ver \naplicaciones\n), por lo que su definici\u00f3n y empaquetado cambian.\n\n\n\n\nIncluir dependencias cliente en \npackage.json\n.\n\n\nIncluir dependencias servidor en \npom.xml\n.\n\n\nIncluir dependencias h\u00edbridas (cliente y servidor juntos) en ambos ficheros.\n\n\nConfigurar el plugin \ncom.github.eirslett:frontend-maven-plugin\n en \npom.xml\n (ver \nejemplo\n).\n\n\n\n\nUna vez hecho esto, basta con ejecutar \nmvn package\n para minificar y empaquetar todos los recursos (cliente y servidor) en un \u00fanico paquete \n.war\n.", 
            "title": "Migraci\u00f3n"
        }, 
        {
            "location": "/dev/migrate/#migrando-a-la-version-6x", 
            "text": "A partir de la versi\u00f3n 6.0.0, todos los plugins deben contenterse en un subdirectorio con el nombre del plugin, dentro de  geoladris  o  plugins  (en funci\u00f3n de su empaquetado; ver  plugins ).", 
            "title": "Migrando a la versi\u00f3n 6.x"
        }, 
        {
            "location": "/dev/migrate/#plugins-empaquetados-como-jar", 
            "text": "Anteriormente, los recursos de un plugin empaquetado como jar estaban directamente dentro de  geoladris , por lo que un plugin de este tipo que funciona con la versi\u00f3n 5.0.0 no ser\u00e1 v\u00e1lido para la versi\u00f3n 6.0.0.  Para migrar a la versi\u00f3n 6.x bastar\u00e1 con crear un subdirectorio con el nombre de nuestro plugin dentro de  geoladris  y mover todos los recursos ah\u00ed.  Por ejemplo, para un plugin empaquetado como jar, en la versi\u00f3n 5.0.0 tendr\u00edamos algo como esto:   que deber\u00edamos transformar a:", 
            "title": "Plugins empaquetados como .jar"
        }, 
        {
            "location": "/dev/migrate/#plugins-empaquetados-en-el-directorio-de-configuracion", 
            "text": "En este caso, los plugins ya estaban dentro de un subdirectorio de  plugins  en la versi\u00f3n 5.x, por lo que funcionar\u00e1n en la versi\u00f3n 6.x sin ning\u00fan cambio.", 
            "title": "Plugins empaquetados en el directorio de configuraci\u00f3n"
        }, 
        {
            "location": "/dev/migrate/#migrando-a-la-version-7x", 
            "text": "", 
            "title": "Migrando a la versi\u00f3n 7.x"
        }, 
        {
            "location": "/dev/migrate/#plugins", 
            "text": "La estructura de los plugins cliente ha cambiado completamente (ver  plugins ). Para la migraci\u00f3n habr\u00eda que:   Mover m\u00f3dulos de  src/main/resources/geoladris/ plugin /modules  a  src .  Gestionar las dependencias con  package.json / yarn .   Todav\u00eda es posible gestionar las dependencias de manera manual (en  jslib  en lugar de  src/main/resources/geoladris/ plugin /jslib ), aunque en un futuro esta opci\u00f3n desaparecer\u00e1.", 
            "title": "Plugins"
        }, 
        {
            "location": "/dev/migrate/#aplicaciones", 
            "text": "Las dependencias de las aplicaciones se gestionan ahora conjuntamente con Maven y  yarn  (ver  aplicaciones ), por lo que su definici\u00f3n y empaquetado cambian.   Incluir dependencias cliente en  package.json .  Incluir dependencias servidor en  pom.xml .  Incluir dependencias h\u00edbridas (cliente y servidor juntos) en ambos ficheros.  Configurar el plugin  com.github.eirslett:frontend-maven-plugin  en  pom.xml  (ver  ejemplo ).   Una vez hecho esto, basta con ejecutar  mvn package  para minificar y empaquetar todos los recursos (cliente y servidor) en un \u00fanico paquete  .war .", 
            "title": "Aplicaciones"
        }, 
        {
            "location": "/dev/contribute/", 
            "text": "Lista de correo\n\n\nIssues y tags en Github\n\n\nFormateo de c\u00f3digo\n\n\nPull requests", 
            "title": "Contribuir"
        }, 
        {
            "location": "/dev/eclipse/", 
            "text": "C\u00f3mo configurar el workspace de Eclipse.\n\n\n\n\n\n\nCosas \u00fatiles, como filtrar los recursos node* para los plugins:\n\n\n\n\n\n\nfor i in `find geoladris/plugins -name .project`; do\n  sed -i \ns#\n/projectDescription\n#\nfilteredResources\nfilter\nid\n`date +%s0000`\n/id\nname\n/name\ntype\n10\n/type\nmatcher\nid\norg.eclipse.ui.ide.multiFilter\n/id\narguments\n1.0-name-matches-false-false-node*\n/arguments\n/matcher\n/filter\n/filteredResources\n/projectDescription\n#g\n $i;\ndone", 
            "title": "Desarrollar con Eclipse"
        }, 
        {
            "location": "/ref/changelog/", 
            "text": "This project follows \nsemantic versioning\n.\n\n\nCore - Sin publicar\n\n\nModificado\n\n\n\n\nEl proceso de empaquetado de aplicaciones ahora se gestiona con Maven y \nyarn\n conjuntamente (ver \naplicaciones\n).\n\n\nLas dependencias de los plugins cliente se gestionan ahora con \nyarn\n.\n\n\nEstructura de los plugins cliente (ver \nplugins\n).\n\n\n\n\nEliminado\n\n\n\n\nVariable de entorno \nGEOLADRIS_MINIFIED\n. Los recursos en cliente se sirven minificados por defecto, con la posibilidad de servirlos sin minificar con el par\u00e1metro \ndebug=true\n.\n\n\n\n\nCore - 6.0.0 [2017-04-21]\n\n\nModificado\n\n\n\n\nLos plugins empaquetados como \n.jar\n pasan a estar contenidos en un subdirectorio dentro de \ngeoladris\n (en lugar de directamente en \ngeoladris\n). As\u00ed, todos los plugins est\u00e1n en subdirectorios, independientemente de su empaquetado (ver \ngu\u00eda de migraci\u00f3n\n).\n\n\nTodos los plugins toman su nombre del subdirectorio en el que est\u00e1n contenidos.\n\n\ninstallInRoot\n por defecto a \nfalse\n para todos los plugins, independientemente del empaquetado; \ncore\n se mantiene con \ninstallInRoot : true\n para que sus m\u00f3dulos se puedan referenciar de manera sencilla desde otros plugins.\n\n\nModuleConfigurationProvider\n a\u00f1adidos a una lista en \nServletContext\n en lugar de a un objeto \nConfig\n (ver \ngu\u00eda de migraci\u00f3n\n).\n\n\n\n\nCorregido\n\n\n\n\nMinificaci\u00f3n no funciona para plugins con \ninstallInRoot : false\n.\n\n\nPeticiones a recursos cualificados devuelven recursos sin cualificar (y viceversa)\n.\n\n\nNullPointerException\n cuando alg\u00fan \nModuleConfigurationProvider\n devuelve configuraci\u00f3n para un plugin no existente.\n\n\nBug con ficheros CSS llamados igual que el directorio que los contiene (\nstyles/styles.css\n, \nmodules/modules.css\n, \ntheme/theme.css\n) en plugins con \ninstallInRoot:false\n.\n\n\n\n\nA\u00f1adido\n\n\n\n\nScript (\ngeoladris_build.sh\n) para generar paquetes \n.war\n a partir de un descriptor \nbuild.json\n y un directorio de configuraci\u00f3n.\n\n\nPosibilidad de obtener la configuraci\u00f3n desde una base de datos, tanto configuraci\u00f3n de plugins (\npublic-conf.json\n) como propiedades (\nportal.properties\n) y mensajes (\nmessages/messages*.properties\n).\n\n\nPosibilidad de a\u00f1adir m\u00f3dulos en subdirectorios\n.\n\n\nDetectar cambios en los directorios de plugins\n.\n\n\nFichero descriptor de plugin (\nplugin\n-conf.json\n) opcional\n.\n\n\nVariable \nGEOLADRIS_CACHE_TIMEOUT\n (en segundos) para limpiar la cach\u00e9 de configuraci\u00f3n. \u00danicamente se tiene en cuenta si la variable \nGEOLADRIS_CONFIG_CACHE\n es \ntrue\n.\n\n\nM\u00e9todo \nPortalRequestConfiguration.getCurrentConfiguration()\n para poder modificar desde un \nModuleConfigurationProvider\n la configuraci\u00f3n en construcci\u00f3n, obtenida de los \nModuleConfigurationProvider\n previos.\n\n\n\n\nCore - 5.0.1 [2016-12-06]\n\n\nCorregido\n\n\n\n\nDevolver \nContent-type\n correcto para im\u00e1genes SVG\n.\n\n\n\n\nCore - 5.0.0 [2016-11-25]\n\n\nCorregido\n\n\n\n\nEspecificar \narrays\n JSON como configuraci\u00f3n de los m\u00f3dulos\n.\n\n\nSoporte para Java 8\n.\n\n\nEnviar al cliente \u00fanicamente las propiedades bien conocidas\n.\n\n\nPosibilidad de tener un directorio de configuraci\u00f3n distinto por aplicaci\u00f3n\n.\n\n\n\n\nA\u00f1adido\n\n\n\n\nNuevo descriptor de aplicaci\u00f3n \npublic-conf.json\n. Permite activar y desactivar plugins. Sustituye a \nplugin-conf.json\n, que se mantiene temporalmente por compatibilidad hacia atr\u00e1s.\n\n\nMezclar la configuraci\u00f3n por defecto de los plugins y no s\u00f3lo de sobreescribirla.\n\n\nEspecificar \nconfiguraci\u00f3n espec\u00edfica de usuario\n.\n\n\nA\u00f1adir plugins (s\u00f3lo parte cliente) en el directorio de configuraci\u00f3n.\n\n\nCualificar los m\u00f3dulos con el nombre del plugin al que pertenecen (\ninstallInRoot:false\n).\n\n\nDirectorio \ntheme\n en los plugins. Contiene ficheros CSS con el estilo de la aplicaci\u00f3n.\n\n\nPar\u00e1metro \ndebug\n que carga los m\u00f3dulos sin minificaci\u00f3n.\n\n\nEspecificar el t\u00edtulo del documento HTML en el fichero \nportal.properties\n.\n\n\n\n\nModificado\n\n\n\n\nEl soporte para el fichero \nlayers.json\n se ha movido al plugin \nbase\n.\n\n\nEl directorio \nnfms\n que contiene los recursos se ha renombrado a \ngeoladris\n.\n\n\n\n\nBugs conocidos\n\n\n\n\nMinificaci\u00f3n no funciona para plugins con installInRoot:false\n.\n\n\nEs posible cargar recursos instalados en la ra\u00edz como si pertenecieran a un plugin inexistente.\n.", 
            "title": "Registro de cambios"
        }, 
        {
            "location": "/ref/changelog/#core-sin-publicar", 
            "text": "", 
            "title": "Core - Sin publicar"
        }, 
        {
            "location": "/ref/changelog/#modificado", 
            "text": "El proceso de empaquetado de aplicaciones ahora se gestiona con Maven y  yarn  conjuntamente (ver  aplicaciones ).  Las dependencias de los plugins cliente se gestionan ahora con  yarn .  Estructura de los plugins cliente (ver  plugins ).", 
            "title": "Modificado"
        }, 
        {
            "location": "/ref/changelog/#eliminado", 
            "text": "Variable de entorno  GEOLADRIS_MINIFIED . Los recursos en cliente se sirven minificados por defecto, con la posibilidad de servirlos sin minificar con el par\u00e1metro  debug=true .", 
            "title": "Eliminado"
        }, 
        {
            "location": "/ref/changelog/#core-600-2017-04-21", 
            "text": "", 
            "title": "Core - 6.0.0 [2017-04-21]"
        }, 
        {
            "location": "/ref/changelog/#modificado_1", 
            "text": "Los plugins empaquetados como  .jar  pasan a estar contenidos en un subdirectorio dentro de  geoladris  (en lugar de directamente en  geoladris ). As\u00ed, todos los plugins est\u00e1n en subdirectorios, independientemente de su empaquetado (ver  gu\u00eda de migraci\u00f3n ).  Todos los plugins toman su nombre del subdirectorio en el que est\u00e1n contenidos.  installInRoot  por defecto a  false  para todos los plugins, independientemente del empaquetado;  core  se mantiene con  installInRoot : true  para que sus m\u00f3dulos se puedan referenciar de manera sencilla desde otros plugins.  ModuleConfigurationProvider  a\u00f1adidos a una lista en  ServletContext  en lugar de a un objeto  Config  (ver  gu\u00eda de migraci\u00f3n ).", 
            "title": "Modificado"
        }, 
        {
            "location": "/ref/changelog/#corregido", 
            "text": "Minificaci\u00f3n no funciona para plugins con  installInRoot : false .  Peticiones a recursos cualificados devuelven recursos sin cualificar (y viceversa) .  NullPointerException  cuando alg\u00fan  ModuleConfigurationProvider  devuelve configuraci\u00f3n para un plugin no existente.  Bug con ficheros CSS llamados igual que el directorio que los contiene ( styles/styles.css ,  modules/modules.css ,  theme/theme.css ) en plugins con  installInRoot:false .", 
            "title": "Corregido"
        }, 
        {
            "location": "/ref/changelog/#anadido", 
            "text": "Script ( geoladris_build.sh ) para generar paquetes  .war  a partir de un descriptor  build.json  y un directorio de configuraci\u00f3n.  Posibilidad de obtener la configuraci\u00f3n desde una base de datos, tanto configuraci\u00f3n de plugins ( public-conf.json ) como propiedades ( portal.properties ) y mensajes ( messages/messages*.properties ).  Posibilidad de a\u00f1adir m\u00f3dulos en subdirectorios .  Detectar cambios en los directorios de plugins .  Fichero descriptor de plugin ( plugin -conf.json ) opcional .  Variable  GEOLADRIS_CACHE_TIMEOUT  (en segundos) para limpiar la cach\u00e9 de configuraci\u00f3n. \u00danicamente se tiene en cuenta si la variable  GEOLADRIS_CONFIG_CACHE  es  true .  M\u00e9todo  PortalRequestConfiguration.getCurrentConfiguration()  para poder modificar desde un  ModuleConfigurationProvider  la configuraci\u00f3n en construcci\u00f3n, obtenida de los  ModuleConfigurationProvider  previos.", 
            "title": "A\u00f1adido"
        }, 
        {
            "location": "/ref/changelog/#core-501-2016-12-06", 
            "text": "", 
            "title": "Core - 5.0.1 [2016-12-06]"
        }, 
        {
            "location": "/ref/changelog/#corregido_1", 
            "text": "Devolver  Content-type  correcto para im\u00e1genes SVG .", 
            "title": "Corregido"
        }, 
        {
            "location": "/ref/changelog/#core-500-2016-11-25", 
            "text": "", 
            "title": "Core - 5.0.0 [2016-11-25]"
        }, 
        {
            "location": "/ref/changelog/#corregido_2", 
            "text": "Especificar  arrays  JSON como configuraci\u00f3n de los m\u00f3dulos .  Soporte para Java 8 .  Enviar al cliente \u00fanicamente las propiedades bien conocidas .  Posibilidad de tener un directorio de configuraci\u00f3n distinto por aplicaci\u00f3n .", 
            "title": "Corregido"
        }, 
        {
            "location": "/ref/changelog/#anadido_1", 
            "text": "Nuevo descriptor de aplicaci\u00f3n  public-conf.json . Permite activar y desactivar plugins. Sustituye a  plugin-conf.json , que se mantiene temporalmente por compatibilidad hacia atr\u00e1s.  Mezclar la configuraci\u00f3n por defecto de los plugins y no s\u00f3lo de sobreescribirla.  Especificar  configuraci\u00f3n espec\u00edfica de usuario .  A\u00f1adir plugins (s\u00f3lo parte cliente) en el directorio de configuraci\u00f3n.  Cualificar los m\u00f3dulos con el nombre del plugin al que pertenecen ( installInRoot:false ).  Directorio  theme  en los plugins. Contiene ficheros CSS con el estilo de la aplicaci\u00f3n.  Par\u00e1metro  debug  que carga los m\u00f3dulos sin minificaci\u00f3n.  Especificar el t\u00edtulo del documento HTML en el fichero  portal.properties .", 
            "title": "A\u00f1adido"
        }, 
        {
            "location": "/ref/changelog/#modificado_2", 
            "text": "El soporte para el fichero  layers.json  se ha movido al plugin  base .  El directorio  nfms  que contiene los recursos se ha renombrado a  geoladris .", 
            "title": "Modificado"
        }, 
        {
            "location": "/ref/changelog/#bugs-conocidos", 
            "text": "Minificaci\u00f3n no funciona para plugins con installInRoot:false .  Es posible cargar recursos instalados en la ra\u00edz como si pertenecieran a un plugin inexistente. .", 
            "title": "Bugs conocidos"
        }, 
        {
            "location": "/ref/plugins/", 
            "text": "Documentaci\u00f3n de referencia de la configuraci\u00f3n de los plugins (obtenida con \nmodule.config()\n).", 
            "title": "Plugins"
        }, 
        {
            "location": "/ref/events/", 
            "text": "Documentaci\u00f3n de referencia de todos los eventos de los plugins. Pensar c\u00f3mo organizar esto (por plugins, por eventos y decir qu\u00e9 plugins utilizan qu\u00e9, con una tabla, etc.)", 
            "title": "Eventos"
        }
    ]
}