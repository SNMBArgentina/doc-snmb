{
    "docs": [
        {
            "location": "/", 
            "text": "Documentaci\u00f3n de Geoladris\n\n\nUsuario\n\n\n\n\nGu\u00eda r\u00e1pida\n.\n\n\nConfiguraci\u00f3n de aplicaciones\n.\n\n\nCreaci\u00f3n de aplicaciones\n.\n\n\n\n\nDesarrollador\n\n\n\n\nC\u00f3digo fuente\n.\n\n\nGu\u00eda r\u00e1pida\n.\n\n\nPlugins\n.\n\n\nAplicaciones\n.\n\n\nMigraci\u00f3n\n.\n\n\nContribuir\n.\n\n\nDesarrolar con Eclipse\n.\n\n\n\n\nReferencia\n\n\n\n\nRegistro de cambios\n.\n\n\nPlugins\n.\n\n\nEventos\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#documentacion-de-geoladris", 
            "text": "", 
            "title": "Documentaci\u00f3n de Geoladris"
        }, 
        {
            "location": "/#usuario", 
            "text": "Gu\u00eda r\u00e1pida .  Configuraci\u00f3n de aplicaciones .  Creaci\u00f3n de aplicaciones .", 
            "title": "Usuario"
        }, 
        {
            "location": "/#desarrollador", 
            "text": "C\u00f3digo fuente .  Gu\u00eda r\u00e1pida .  Plugins .  Aplicaciones .  Migraci\u00f3n .  Contribuir .  Desarrolar con Eclipse .", 
            "title": "Desarrollador"
        }, 
        {
            "location": "/#referencia", 
            "text": "Registro de cambios .  Plugins .  Eventos .", 
            "title": "Referencia"
        }, 
        {
            "location": "/user/quickstart/", 
            "text": "Lo primero que hay que hacer es descargarse la aplicaci\u00f3n \ndemo\n y desplegarla en Tomcat:\n\n\ncurl http://nullisland.geomati.co:8082/repository/releases/org/fao/unredd/apps/demo/6.0.1/demo-6.0.1.war \n $CATALINA_BASE/webapps/demo.war\n\n\n\n\n\nAccedemos al navegador para visualizarla: \nhttp://localhost:8080/demo/\n:\n\n\n\n\nAhora podemos probar a cambiar algo en el visor. Editamos el fichero \n$CATALINA_BASE/webapps/demo/WEB-INF/default_config/public-conf.json\n y modificamos lo siguiente:\n\n\n...\n\n\nlayer-order\n \n:\n \n{\n\n    \n_enabled\n \n:\n \ntrue\n\n\n}\n,\n\n\n...\n\n\n\n\n\n\nAcabamos de habilitar el plugin \nlayer-order\n. Si recargamos el visor:\n\n\n\n\ncomprobaremos que ha aparecido el plugin \nlayer-order\n en la barra de herramientas.\n\n\nA partir de aqu\u00ed podemos seguir \nconfigurando\n la aplicaci\u00f3n \ndemo\n o \ncrear\n una propia.", 
            "title": "Gu\u00eda r\u00e1pida"
        }, 
        {
            "location": "/user/config/", 
            "text": "Directorio de configuraci\u00f3n\n\n\nLas aplicaciones Geoladris se configuran mediante un directorio con ficheros de configuraci\u00f3n.\n\n\nEste directorio deber\u00e1 contener un subdirectorio por cada aplicaci\u00f3n desplegada. Por ejemplo, si se han desplegado las aplicaciones \ndemo.war\n y \nbosques.war\n, y \nGEOLADRIS_CONFIG_DIR\n se ha establecido a \n/var/geoladris\n, se utilizar\u00e1n los directorios \n/var/geoladris/demo\n y \n/var/geoladris/bosques\n para las aplicaciones \ndemo.war\n y \nbosques.war\n respectivamente.\n\n\nSi alguno de esos directorios no existe o si \nGEOLADRIS_CONFIG_DIR\n no se ha configurado correctamente, se utilizar\u00e1 el directorio por defecto para esa aplicaci\u00f3n concreta: \n$CATALINA_BASE/webapps/\napp\n/WEB-INF/default_config\n.\n\n\nPara configurar este directorio en Tomcat hay diferentes formas de hacerlo:\n\n\n\n\nVariable de entorno: \nexport GEOLADRIS_CONFIG_DIR=/var/geoladris\n.\n\n\nPropiedad Java: \n-DGEOLADRIS_CONFIG_DIR=/var/geoladris\n.\n\n\nPar\u00e1metro en \nweb.xml\n:\n\n\n\n\n    \ncontext-param\n\n        \nparam-name\nGEOLADRIS_CONF_DIR\n/param-name\n\n        \nparam-value\n/var/geoladris\n/param-value\n\n    \n/context-param\n\n\n\n\n\n\nA partir de ahora utilizaremos \nconfig_dir\n como el directorio de configuraci\u00f3n de una aplicaci\u00f3n.\n\n\nConfiguraci\u00f3n global\n\n\nLa configuraci\u00f3n global de la aplicaci\u00f3n se realiza con el fichero \nconfig_dir\n/public-conf.json\n. Es un fichero de texto que contiene un objeto JSON donde cada propiedad del objeto es el nombre del plugin a configurar y el valor es la configuraci\u00f3n del plugin.\n\n\nLa configuraci\u00f3n del plugin es a su vez otro objeto JSON. Cada propiedad es el nombre del m\u00f3dulo RequireJS a configurar y el valor es la configuraci\u00f3n del m\u00f3dulo, tal y como se puede obtener con \nmodule.config()\n.\n\n\nAparte existen las siguientes propiedades o psedo-m\u00f3dulos:\n\n\n\n\n_enabled\n: Activa (\ntrue\n) o desactiva (\nfalse\n) el plugin. Por defecto es \ntrue\n.\n\n\n_override\n: Sobreescribe (\ntrue\n) o mezcla (\nfalse\n) la configuraci\u00f3n por defecto del plugin. Por defecto es \nfalse\n.\n\n\n\n\nEjemplo:\n\n\n{\n\n  \nbase\n \n:\n \n{\n\n    \nbanner\n \n:\n \n{\n\n      \nhide\n \n:\n \ntrue\n,\n\n      \nshow-flag\n \n:\n \nfalse\n,\n\n      \nshow-logos\n \n:\n \nfalse\n\n    \n}\n\n  \n},\n\n  \nfootnote\n:\n \n{\n\n    \nfootnote\n:\n \n{\n\n      \ntext\n:\n \nfootnote.text\n,\n\n      \nlink\n:\n \nhttp://example.com\n,\n\n      \nalign\n:\n \ncenter\n\n    \n}\n\n  \n},\n\n  \nfeedback\n:\n \n{\n\n    \n_enabled\n \n:\n \nfalse\n\n  \n}\n\n\n}\n\n\n\n\n\n\nDe esta forma es posible no solo cambiar la configuraci\u00f3n de un plugin, sino tambi\u00e9n a\u00f1adir o eliminar plugins para un usuario concreto con la propiedad \n_enabled\n.\n\n\nAutenticaci\u00f3n y configuraci\u00f3n espec\u00edfica de usuario\n\n\nAdem\u00e1s de la configuraci\u00f3n global, se puede adaptadar la aplicaci\u00f3n en funci\u00f3n del usuario que accede a ella. Basta con a\u00f1adir un fichero \nconfig_dir\n/role_conf/\nrole\n.json\n por cada rol con su configuraci\u00f3n espec\u00edfica. El formato de estos ficheros es el mismo que el de \npublic-conf.json\n.\n\n\nPara mayor flexibilidad, la autenticaci\u00f3n es gestionada por los plugins. Actualmente en Geoladris existe un plugin \nauth\n encargado de la autenticaci\u00f3n. Para utilizarlo es necesario incluirlo en el momento de \ncrear\n la aplicaci\u00f3n.\n\n\nLa autenticaci\u00f3n de este plugin se apoya en la autenticaci\u00f3n del contenedor de servlets. Es decir, si se utiliza Tomcat, los usuarios de Geoladris ser\u00e1n aquellos que est\u00e1n configurados en Tomcat.\n\n\nPara configurar la autenticaci\u00f3n de Tomcat, lo m\u00e1s f\u00e1cil es editar el fichero \n$CATALINA_BASE/conf/tomcat-users.xml\n y a\u00f1adir los usuarios y roles que necesitemos. Por ejemplo:\n\n\ntomcat-users\n\n  \nrole\n \nrolename=\nviewer\n/\n\n  \nuser\n \nusername=\nuser\n \npassword=\npass\n \nroles=\nviewer\n/\n\n\n/tomcat-users\n\n\n\n\n\n\nAunque hay otras opciones de configuraci\u00f3n que se pueden encontrar en la \ndocumentaci\u00f3n oficial\n.\n\n\nUna vez se han configurado los usuarios, lo siguiente es restringir qu\u00e9 roles pueden acceder al visor. Para ello, basta con a\u00f1adir la propiedad \nauth.roles\n al fichero \nportal.properties\n del directorio de configuraci\u00f3n:\n\n\nauth.roles=viewer\n\n\n\n\n\nEsta propiedad es una lista de roles separada por comas. Los roles deben de coincidir con los roles definidos en Tomcat.\n\n\nPor \u00faltimo, para configurar el visor de manera espec\u00edfica para cada rol deberemos a\u00f1adir un fichero \nrole\n.json\n a \nconfig_dir\n/role_conf\n por cada rol definido en \nauth.roles\n.\n\n\nPor ejemplo, para habilitar los plugins \nlayer-order\n y \nlayers-editor\n en el rol \nviewer\n, habr\u00e1 que a\u00f1adir un fichero \nrole_conf/viewer.json\n con el siguiente contenido:\n\n\n{\n\n    \nlayer-order\n \n:\n \n{\n\n        \n_enabled\n \n:\n \ntrue\n\n    \n},\n\n    \nlayers-editor\n \n:\n \n{\n\n        \n_enabled\n \n:\n \ntrue\n\n    \n}\n\n\n}\n\n\n\n\n\n\nTraducciones\n\n\n\n\nTODO Subdirectorio \nmessages\n\n\n\n\nA\u00f1adir plugins despu\u00e9s de desplegar\n\n\n\n\nTODO Subdirectorio \nplugins\n\n\n\n\nRecursos est\u00e1ticos\n\n\n\n\nTODO Subdirectorio \nstatic\n\n\n\n\nconfig_dir\n/portal.properties\n\n\nFichero de propiedades. Cada plugin define sus propiedades (ver \nreferencia\n). Estas propiedades son privadas y nunca abandonan el servidor, por lo que es un buen sitio para almacenar contrase\u00f1as y otra informaci\u00f3n sensible.\n\n\nConfigurar cach\u00e9\n\n\n\n\nTODO\n\n\n\n\nGEOLADRIS_CONFIG_CACHE\n\n\nGEOLADRIS_CACHE_TIMEOUT", 
            "title": "Configuraci\u00f3n de aplicaciones"
        }, 
        {
            "location": "/user/config/#directorio-de-configuracion", 
            "text": "Las aplicaciones Geoladris se configuran mediante un directorio con ficheros de configuraci\u00f3n.  Este directorio deber\u00e1 contener un subdirectorio por cada aplicaci\u00f3n desplegada. Por ejemplo, si se han desplegado las aplicaciones  demo.war  y  bosques.war , y  GEOLADRIS_CONFIG_DIR  se ha establecido a  /var/geoladris , se utilizar\u00e1n los directorios  /var/geoladris/demo  y  /var/geoladris/bosques  para las aplicaciones  demo.war  y  bosques.war  respectivamente.  Si alguno de esos directorios no existe o si  GEOLADRIS_CONFIG_DIR  no se ha configurado correctamente, se utilizar\u00e1 el directorio por defecto para esa aplicaci\u00f3n concreta:  $CATALINA_BASE/webapps/ app /WEB-INF/default_config .  Para configurar este directorio en Tomcat hay diferentes formas de hacerlo:   Variable de entorno:  export GEOLADRIS_CONFIG_DIR=/var/geoladris .  Propiedad Java:  -DGEOLADRIS_CONFIG_DIR=/var/geoladris .  Par\u00e1metro en  web.xml :        context-param \n         param-name GEOLADRIS_CONF_DIR /param-name \n         param-value /var/geoladris /param-value \n     /context-param   A partir de ahora utilizaremos  config_dir  como el directorio de configuraci\u00f3n de una aplicaci\u00f3n.", 
            "title": "Directorio de configuraci\u00f3n"
        }, 
        {
            "location": "/user/config/#configuracion-global", 
            "text": "La configuraci\u00f3n global de la aplicaci\u00f3n se realiza con el fichero  config_dir /public-conf.json . Es un fichero de texto que contiene un objeto JSON donde cada propiedad del objeto es el nombre del plugin a configurar y el valor es la configuraci\u00f3n del plugin.  La configuraci\u00f3n del plugin es a su vez otro objeto JSON. Cada propiedad es el nombre del m\u00f3dulo RequireJS a configurar y el valor es la configuraci\u00f3n del m\u00f3dulo, tal y como se puede obtener con  module.config() .  Aparte existen las siguientes propiedades o psedo-m\u00f3dulos:   _enabled : Activa ( true ) o desactiva ( false ) el plugin. Por defecto es  true .  _override : Sobreescribe ( true ) o mezcla ( false ) la configuraci\u00f3n por defecto del plugin. Por defecto es  false .   Ejemplo:  { \n   base   :   { \n     banner   :   { \n       hide   :   true , \n       show-flag   :   false , \n       show-logos   :   false \n     } \n   }, \n   footnote :   { \n     footnote :   { \n       text :   footnote.text , \n       link :   http://example.com , \n       align :   center \n     } \n   }, \n   feedback :   { \n     _enabled   :   false \n   }  }   De esta forma es posible no solo cambiar la configuraci\u00f3n de un plugin, sino tambi\u00e9n a\u00f1adir o eliminar plugins para un usuario concreto con la propiedad  _enabled .", 
            "title": "Configuraci\u00f3n global"
        }, 
        {
            "location": "/user/config/#autenticacion-y-configuracion-especifica-de-usuario", 
            "text": "Adem\u00e1s de la configuraci\u00f3n global, se puede adaptadar la aplicaci\u00f3n en funci\u00f3n del usuario que accede a ella. Basta con a\u00f1adir un fichero  config_dir /role_conf/ role .json  por cada rol con su configuraci\u00f3n espec\u00edfica. El formato de estos ficheros es el mismo que el de  public-conf.json .  Para mayor flexibilidad, la autenticaci\u00f3n es gestionada por los plugins. Actualmente en Geoladris existe un plugin  auth  encargado de la autenticaci\u00f3n. Para utilizarlo es necesario incluirlo en el momento de  crear  la aplicaci\u00f3n.  La autenticaci\u00f3n de este plugin se apoya en la autenticaci\u00f3n del contenedor de servlets. Es decir, si se utiliza Tomcat, los usuarios de Geoladris ser\u00e1n aquellos que est\u00e1n configurados en Tomcat.  Para configurar la autenticaci\u00f3n de Tomcat, lo m\u00e1s f\u00e1cil es editar el fichero  $CATALINA_BASE/conf/tomcat-users.xml  y a\u00f1adir los usuarios y roles que necesitemos. Por ejemplo:  tomcat-users \n   role   rolename= viewer / \n   user   username= user   password= pass   roles= viewer /  /tomcat-users   Aunque hay otras opciones de configuraci\u00f3n que se pueden encontrar en la  documentaci\u00f3n oficial .  Una vez se han configurado los usuarios, lo siguiente es restringir qu\u00e9 roles pueden acceder al visor. Para ello, basta con a\u00f1adir la propiedad  auth.roles  al fichero  portal.properties  del directorio de configuraci\u00f3n:  auth.roles=viewer  Esta propiedad es una lista de roles separada por comas. Los roles deben de coincidir con los roles definidos en Tomcat.  Por \u00faltimo, para configurar el visor de manera espec\u00edfica para cada rol deberemos a\u00f1adir un fichero  role .json  a  config_dir /role_conf  por cada rol definido en  auth.roles .  Por ejemplo, para habilitar los plugins  layer-order  y  layers-editor  en el rol  viewer , habr\u00e1 que a\u00f1adir un fichero  role_conf/viewer.json  con el siguiente contenido:  { \n     layer-order   :   { \n         _enabled   :   true \n     }, \n     layers-editor   :   { \n         _enabled   :   true \n     }  }", 
            "title": "Autenticaci\u00f3n y configuraci\u00f3n espec\u00edfica de usuario"
        }, 
        {
            "location": "/user/config/#traducciones", 
            "text": "TODO Subdirectorio  messages", 
            "title": "Traducciones"
        }, 
        {
            "location": "/user/config/#anadir-plugins-despues-de-desplegar", 
            "text": "TODO Subdirectorio  plugins", 
            "title": "A\u00f1adir plugins despu\u00e9s de desplegar"
        }, 
        {
            "location": "/user/config/#recursos-estaticos", 
            "text": "TODO Subdirectorio  static", 
            "title": "Recursos est\u00e1ticos"
        }, 
        {
            "location": "/user/config/#config_dirportalproperties", 
            "text": "Fichero de propiedades. Cada plugin define sus propiedades (ver  referencia ). Estas propiedades son privadas y nunca abandonan el servidor, por lo que es un buen sitio para almacenar contrase\u00f1as y otra informaci\u00f3n sensible.", 
            "title": "&lt;config_dir&gt;/portal.properties"
        }, 
        {
            "location": "/user/config/#configurar-cache", 
            "text": "TODO   GEOLADRIS_CONFIG_CACHE  GEOLADRIS_CACHE_TIMEOUT", 
            "title": "Configurar cach\u00e9"
        }, 
        {
            "location": "/user/create/", 
            "text": "geoladris_build.sh", 
            "title": "Creaci\u00f3n de aplicaciones"
        }, 
        {
            "location": "/dev/source_code/", 
            "text": "Tecnolog\u00edas\n\n\n\n\nTODO\n\n\n\n\nyarn\n\n\nMaven (incluso para plugins cliente). mvn verify para probar todo.\n\n\nRequireJS\n\n\n...\n\n\n\n\n\n\nIntegraci\u00f3n continua\n\n\nGeoladris est\u00e1 configurado en \nTravis\n para su integraci\u00f3n continua.\n\n\nLa configuraci\u00f3n debe garantizar que se pasan todos los tests y que se hace un \nmvn deploy\n de todos los artefactos que componen Geoladris.\n\n\nEl deploy de Maven requiere autenticaci\u00f3n. Para proporcionarla hay un fichero \ndeploy-settings.xml\n en la ra\u00edz del repositorio que utiliza variables de entorno para las credenciales:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nsettings\n\n        \nxmlns=\nhttp://maven.apache.org/SETTINGS/1.0.0\n\n        \nxmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n        \nxsi:schemaLocation=\nhttp://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\n\n    \nservers\n\n        \nserver\n\n            \nid\ngeoladris-releases\n/id\n\n            \nusername\n${env.GEOLADRIS_DEPLOY_USER}\n/username\n\n            \npassword\n${env.GEOLADRIS_DEPLOY_PASS}\n/password\n\n        \n/server\n\n        \nserver\n\n            \nid\ngeoladris-snapshots\n/id\n\n            \nusername\n${env.GEOLADRIS_DEPLOY_USER}\n/username\n\n            \npassword\n${env.GEOLADRIS_DEPLOY_PASS}\n/password\n\n        \n/server\n\n    \n/servers\n\n\n/settings\n\n\n\n\n\n\nBasta con configurar Maven en el fichero \n.travis.yml\n para que utilice este fichero:\n\n\nafter_success:\n  - mvn deploy -s deploy-settings.xml\n\n\n\n\n\nPor \u00faltimo, hay que configurar las variables de entorno en la interfaz web de Travis.\n\n\nDepurando JavaScript en el navegador\n\n\nPor defecto, se utilizan recursos minificados en el cliente. Los recursos minificados forman parte del \nempaquetado\n.\n\n\nTambi\u00e9n es posible utilizar recursos \nno\n minificados a\u00f1adiendo el par\u00e1metro \ndebug=true\n a la petici\u00f3n HTML. Por ejemplo: http://localhost:8080/demo/?debug=true.\n\n\nGit\n\n\n\n\nTODO\n\n\n\n\nRepositorios.\n\n\nModelo de ramas. Revisar doc:\n\n\nGeoServer\n\n\ngitflow\n\n\ncactus", 
            "title": "C\u00f3digo fuente"
        }, 
        {
            "location": "/dev/source_code/#tecnologias", 
            "text": "TODO   yarn  Maven (incluso para plugins cliente). mvn verify para probar todo.  RequireJS  ...", 
            "title": "Tecnolog\u00edas"
        }, 
        {
            "location": "/dev/source_code/#integracion-continua", 
            "text": "Geoladris est\u00e1 configurado en  Travis  para su integraci\u00f3n continua.  La configuraci\u00f3n debe garantizar que se pasan todos los tests y que se hace un  mvn deploy  de todos los artefactos que componen Geoladris.  El deploy de Maven requiere autenticaci\u00f3n. Para proporcionarla hay un fichero  deploy-settings.xml  en la ra\u00edz del repositorio que utiliza variables de entorno para las credenciales:  ?xml version= 1.0  encoding= UTF-8 ?  settings \n         xmlns= http://maven.apache.org/SETTINGS/1.0.0 \n         xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n         xsi:schemaLocation= http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd \n     servers \n         server \n             id geoladris-releases /id \n             username ${env.GEOLADRIS_DEPLOY_USER} /username \n             password ${env.GEOLADRIS_DEPLOY_PASS} /password \n         /server \n         server \n             id geoladris-snapshots /id \n             username ${env.GEOLADRIS_DEPLOY_USER} /username \n             password ${env.GEOLADRIS_DEPLOY_PASS} /password \n         /server \n     /servers  /settings   Basta con configurar Maven en el fichero  .travis.yml  para que utilice este fichero:  after_success:\n  - mvn deploy -s deploy-settings.xml  Por \u00faltimo, hay que configurar las variables de entorno en la interfaz web de Travis.", 
            "title": "Integraci\u00f3n continua"
        }, 
        {
            "location": "/dev/source_code/#depurando-javascript-en-el-navegador", 
            "text": "Por defecto, se utilizan recursos minificados en el cliente. Los recursos minificados forman parte del  empaquetado .  Tambi\u00e9n es posible utilizar recursos  no  minificados a\u00f1adiendo el par\u00e1metro  debug=true  a la petici\u00f3n HTML. Por ejemplo: http://localhost:8080/demo/?debug=true.", 
            "title": "Depurando JavaScript en el navegador"
        }, 
        {
            "location": "/dev/source_code/#git", 
            "text": "TODO   Repositorios.  Modelo de ramas. Revisar doc:  GeoServer  gitflow  cactus", 
            "title": "Git"
        }, 
        {
            "location": "/dev/quickstart/", 
            "text": "Clonar repos\n\n\nmvn install (mvn generate-resources ejecuta yarn install sin ejecutar tests).\n\n\nEmpaquetar app\n\n\nProbar en Tomcat", 
            "title": "Gu\u00eda r\u00e1pida"
        }, 
        {
            "location": "/dev/plugins/", 
            "text": "Las aplicaciones Geoladris utilizan una arquitectura cliente/servidor. El servidor utiliza la API Servlet mientras que el cliente utiliza HTML+CSS+Javascript.\n\n\nPodemos encontrar dos tipos b\u00e1sicos de plugins: servidor y cliente.\n\n\nServidor\n\n\nUn plugin servidor es un proyecto Java que aprovecha la \nAPI Servlet 3.1\n en el servidor. Es suficiente tener un paquete \n.jar\n en el \nclasspath\n que contenga un fichero \nweb-fragment.xml\n con los \nservlets\n, filtros, etc. a utilizar por el plugin.\n\n\nCliente\n\n\nUn plugin cliente es un directorio que contiene:\n\n\n\n\nsrc\n: Subdirectorio con m\u00f3dulos RequireJS (\n.js\n) y/o estilos (\n.css\n).\n\n\ncss\n: Subdirectorio con estilos (\n.css\n) que tiene preferencia (se aplican despu\u00e9s) con respecto a \nsrc\n.\n\n\njslib\n: \nDeprecado\n. Subdirectorio con librer\u00edas y estilos externos que \nno\n se pueden gestionar con \nnpm\n.\n\n\n\n\ngeoladris.json\n. Descriptor de plugin. Contiene un objeto JSON con:\n\n\n\n\ninstallInRoot\n: Indica si los m\u00f3dulos RequireJS se instalar\u00e1n en la ra\u00edz de la \nbaseURL\n de RequireJS o dentro de un directorio con el nombre del plugin. Por defecto es \nfalse\n.\nHay que tener en cuenta que el lugar donde se instalen los m\u00f3dulos afecta a la manera en la que otros m\u00f3dulos los referencian. Por ejemplo, un m\u00f3dulo llamado \nmi_modulo\n en un plugin \nmi_plugin\n se referenciar\u00e1 como \nmi_modulo\n si se instala en la ra\u00edz (\ninstallInRoot : true\n) y como  \nmi_plugin/mi_modulo\n en caso contrario (o como \n./mi_modulo\n cuando se referencia por otros m\u00f3dulos del mismo plugin).\n\n\n\n\ndefault-conf\n: Configuraci\u00f3n para los m\u00f3dulos RequireJS. Es un objeto donde los nombres de las propiedades son los nombres de los m\u00f3dulos a configurar y los valores la configuraci\u00f3n a pasarles a dichos m\u00f3dulos. En este fichero es suficiente con especificar \u00fanicamente el nombre del m\u00f3dulo (sin el prefijo del \nplugin\n) independientemente del valor de \ninstallInRoot\n.\n\n\nLa configuraci\u00f3n se puede obtener en el m\u00f3dulo con la pseudodependencia \nmodule\n:\n\n\ndefine\n([\n \nmodule\n \n],\n \nfunction\n(\nmodule\n)\n \n{\n\n  \nvar\n \nconfiguration\n \n=\n \nmodule\n.\nconfig\n();\n\n  \n...\n\n\n});\n\n\n\n\n\n\n\n\n\n\nrequirejs\n: Objeto con configuraci\u00f3n de RequireJS. \u00danicamente tiene en cuenta \npaths\n y \nshim\n. \npaths\n \u00fanicamente deber\u00eda incluir rutas a \nnode_modules\n o \njslib\n (deprecado).\n\n\n\n\ncss\n: Array con las rutas a los estilos de librer\u00edas externas a incluir (\nnode_modules\n o \njslib\n).\n\n\n\n\n\n\n\n\npackage.json\n.\n\n\n\n\n\n\nAdicionalmente puede tener otros recursos propios de cualquier proyecto JavaScript (\nkarma.conf.js\n, \ntest\n, \nyarn.lock\n, ...).\n\n\nH\u00edbridos\n\n\nProyectos que contienen ambos tipos de recurso (Java y JavaScript).\n\n\nPara incluir \nrecursos\n correctamente en el .jar.\n\n\nPara empaquetar recursos correctamente en el \npackage.json\n.\n\n\nNOTA\n: Es importante mencionar que los plugins h\u00edbridos se consideran una mala pr\u00e1ctica, ya que acoplan la funcionalidad de cliente y servidor, mezclando todos los recursos y haciendo m\u00e1s dif\u00edcil trabajar con el plugin.\n\n\nPlugins oficiales\n\n\nEn el \nrepositorio\n de Geoladris encontramos todo tipo de plugins, tanto servidor como cliente o h\u00edbridos.\n\n\nLos plugins servidor son proyectos Maven con un \npom.xml\n donde se pueden ejecutar los comandos Maven normalmente (\nmvn clean\n, \nmvn package\n, etc.).\n\n\nLos plugins cliente, adem\u00e1s de los subdirectorios mencionados arriba, contienen los siguientes recursos:\n\n\n\n\ntest\n: Directorio con los ficheros de test. Se utiliza \nJasmine\n como framework de testeo.\n\n\nkarma.conf.js\n: Configuraci\u00f3n para la ejecuci\u00f3n de los tests. Se utiliza \nKarma\n como motor de testeo. Los tests se ejecutan con \nyarn run test\n (o \nyarn run testd\n para depurar).\n\n\nyarn.lock\n: Las dependencias son manejadas con \nyarn\n. Se considera una \nbuena pr\u00e1ctica\n incluir este fichero en el repositorio.\n\n\npom.xml\n: Los plugins cliente tambi\u00e9n se gestionan con Maven (gracias al plugin Maven \nfrontend-maven-plugin\n) de forma que se pueden ejecutar todos los tests, tanto servidor como cliente, con \nmvn test\n.", 
            "title": "Plugins"
        }, 
        {
            "location": "/dev/plugins/#servidor", 
            "text": "Un plugin servidor es un proyecto Java que aprovecha la  API Servlet 3.1  en el servidor. Es suficiente tener un paquete  .jar  en el  classpath  que contenga un fichero  web-fragment.xml  con los  servlets , filtros, etc. a utilizar por el plugin.", 
            "title": "Servidor"
        }, 
        {
            "location": "/dev/plugins/#cliente", 
            "text": "Un plugin cliente es un directorio que contiene:   src : Subdirectorio con m\u00f3dulos RequireJS ( .js ) y/o estilos ( .css ).  css : Subdirectorio con estilos ( .css ) que tiene preferencia (se aplican despu\u00e9s) con respecto a  src .  jslib :  Deprecado . Subdirectorio con librer\u00edas y estilos externos que  no  se pueden gestionar con  npm .   geoladris.json . Descriptor de plugin. Contiene un objeto JSON con:   installInRoot : Indica si los m\u00f3dulos RequireJS se instalar\u00e1n en la ra\u00edz de la  baseURL  de RequireJS o dentro de un directorio con el nombre del plugin. Por defecto es  false .\nHay que tener en cuenta que el lugar donde se instalen los m\u00f3dulos afecta a la manera en la que otros m\u00f3dulos los referencian. Por ejemplo, un m\u00f3dulo llamado  mi_modulo  en un plugin  mi_plugin  se referenciar\u00e1 como  mi_modulo  si se instala en la ra\u00edz ( installInRoot : true ) y como   mi_plugin/mi_modulo  en caso contrario (o como  ./mi_modulo  cuando se referencia por otros m\u00f3dulos del mismo plugin).   default-conf : Configuraci\u00f3n para los m\u00f3dulos RequireJS. Es un objeto donde los nombres de las propiedades son los nombres de los m\u00f3dulos a configurar y los valores la configuraci\u00f3n a pasarles a dichos m\u00f3dulos. En este fichero es suficiente con especificar \u00fanicamente el nombre del m\u00f3dulo (sin el prefijo del  plugin ) independientemente del valor de  installInRoot .  La configuraci\u00f3n se puede obtener en el m\u00f3dulo con la pseudodependencia  module :  define ([   module   ],   function ( module )   { \n   var   configuration   =   module . config (); \n   ...  });     requirejs : Objeto con configuraci\u00f3n de RequireJS. \u00danicamente tiene en cuenta  paths  y  shim .  paths  \u00fanicamente deber\u00eda incluir rutas a  node_modules  o  jslib  (deprecado).   css : Array con las rutas a los estilos de librer\u00edas externas a incluir ( node_modules  o  jslib ).     package.json .    Adicionalmente puede tener otros recursos propios de cualquier proyecto JavaScript ( karma.conf.js ,  test ,  yarn.lock , ...).", 
            "title": "Cliente"
        }, 
        {
            "location": "/dev/plugins/#hibridos", 
            "text": "Proyectos que contienen ambos tipos de recurso (Java y JavaScript).  Para incluir  recursos  correctamente en el .jar.  Para empaquetar recursos correctamente en el  package.json .  NOTA : Es importante mencionar que los plugins h\u00edbridos se consideran una mala pr\u00e1ctica, ya que acoplan la funcionalidad de cliente y servidor, mezclando todos los recursos y haciendo m\u00e1s dif\u00edcil trabajar con el plugin.", 
            "title": "H\u00edbridos"
        }, 
        {
            "location": "/dev/plugins/#plugins-oficiales", 
            "text": "En el  repositorio  de Geoladris encontramos todo tipo de plugins, tanto servidor como cliente o h\u00edbridos.  Los plugins servidor son proyectos Maven con un  pom.xml  donde se pueden ejecutar los comandos Maven normalmente ( mvn clean ,  mvn package , etc.).  Los plugins cliente, adem\u00e1s de los subdirectorios mencionados arriba, contienen los siguientes recursos:   test : Directorio con los ficheros de test. Se utiliza  Jasmine  como framework de testeo.  karma.conf.js : Configuraci\u00f3n para la ejecuci\u00f3n de los tests. Se utiliza  Karma  como motor de testeo. Los tests se ejecutan con  yarn run test  (o  yarn run testd  para depurar).  yarn.lock : Las dependencias son manejadas con  yarn . Se considera una  buena pr\u00e1ctica  incluir este fichero en el repositorio.  pom.xml : Los plugins cliente tambi\u00e9n se gestionan con Maven (gracias al plugin Maven  frontend-maven-plugin ) de forma que se pueden ejecutar todos los tests, tanto servidor como cliente, con  mvn test .", 
            "title": "Plugins oficiales"
        }, 
        {
            "location": "/dev/apps/", 
            "text": "TODO menci\u00f3n a \ngeoladris_build.sh\n.\n\n\n\n\nEstructura de una aplicaci\u00f3n\n\n\n\n\nTODO proyecto Java, pom.xml, web.xml, etc.\n\n\n\n\nDefinir dependencias\n\n\n\n\nTODO en pom.xml y package.json\n\n\n\n\nEmpaquetar\n\n\nEl \ncore\n de Geoladris se encarga de empaquetar todos los recursos tanto Java (servlets, filtros, listeners,...) como JavaScript (m\u00f3dulos, estilos, dependencias, etc. a \nsrc/main/webapp\n para empaquetarlos dentro del war y servirlos con Tomcat) y minificar los recursos est\u00e1ticos.\n\n\nLos \nplugins JavaScript\n se gestionan con herramientas de JavaScript. El flujo de trabajo es:\n\n\n\n\nIncluir plugins en \ndependencies\n dentro del \npackage.json\n.\n\n\nyarn install\n para gestionar todas las dependencias.\n\n\ngl-build-app.js\n. Es un script propio de \ncore\n que:\n\n\nCopia los plugins definidos en la opci\u00f3n \ndependencies\n del \npackage.json\n dentro de \nsrc/main/webapp\n; tambi\u00e9n copia las dependencias (\n*.js\n y \n*.css\n).\n\n\nGenera el fichero \napp.min.css\n con  todos los estilos (de menos a m\u00e1s prioridad: dependencias, \nsrc\n y \ncss\n).\n\n\nGenera el fichero \nmain.js\n de RequireJS que se sirve en la aplicaci\u00f3n final (solo con \ndebug=true\n).\n\n\nGenera el fichero \nindex.html\n.\n\n\nGenera un fichero \nbuild.js\n para minificar m\u00f3dulos RequireJS, teniendo en cuenta la configuraci\u00f3n de \nrequirejs\n en los \ngeoladris.json\n de los plugins.\n\n\nr.js -o build.js\n. Genera \nsrc/main/webapp/app.min.js\n con la minificaci\u00f3n de los recursos JavaScript a partir del \nbuild.js\n generado por \ngl-build-app.js\n.\n\n\n\n\nLos \nplugins Java\n se gestionan simplemente incluy\u00e9ndolos como dependencias en el \npom.xml\n.\n\n\nEl build de plugins JavaScript se incluye como parte del \nbuild\n de Maven con un plugin. Por tanto, basta con hacer \nmvn package\n para empaquetarlo todo.\n\n\nServir\n\n\nUna vez desplegada la aplicaci\u00f3n \n.war\n en Tomcat, el \ncore\n de Geoladris tambi\u00e9n se encarga de servir todos los recursos est\u00e1ticos (plugins empaquetados en el war, plugins en el directorio de configuraci\u00f3n, ficheros est\u00e1ticos en el directorio de configuraci\u00f3n,...) y din\u00e1micos (\nconfig.js\n, ...). Son los siguientes:\n\n\nRecursos est\u00e1ticos gestionados directamente por Tomcat (por estar en \nsrc/main/webapp\n):\n\n\n\n\nsrc/main/webapp/app.min.js\n\n\nsrc/main/webapp/app.min.css\n\n\nsrc/main/webapp/index.html\n\n\nsrc/main/webapp/*.js\n\n\nsrc/main/webapp/geoladris/*\n\n\n\n\nRecursos est\u00e1ticos fuera del \nwar\n. Configurado autom\u00e1ticamente para Tomcat 8.x y 9.x:\n\n\n\n\nconfig_dir\n/plugins/\n. Bajo el path \n/plugins/*\n.\n\n\nconfig_dir\n/static/\n. Bajo el path \n/static/*\n. Inhabilita \nsrc/main/webapp/static\n.\n\n\n\n\nconfig.js\n (con un servlet), que es din\u00e1mico porque puede depender, por ejemplo, del usuario.", 
            "title": "Aplicaciones"
        }, 
        {
            "location": "/dev/apps/#estructura-de-una-aplicacion", 
            "text": "TODO proyecto Java, pom.xml, web.xml, etc.", 
            "title": "Estructura de una aplicaci\u00f3n"
        }, 
        {
            "location": "/dev/apps/#definir-dependencias", 
            "text": "TODO en pom.xml y package.json", 
            "title": "Definir dependencias"
        }, 
        {
            "location": "/dev/apps/#empaquetar", 
            "text": "El  core  de Geoladris se encarga de empaquetar todos los recursos tanto Java (servlets, filtros, listeners,...) como JavaScript (m\u00f3dulos, estilos, dependencias, etc. a  src/main/webapp  para empaquetarlos dentro del war y servirlos con Tomcat) y minificar los recursos est\u00e1ticos.  Los  plugins JavaScript  se gestionan con herramientas de JavaScript. El flujo de trabajo es:   Incluir plugins en  dependencies  dentro del  package.json .  yarn install  para gestionar todas las dependencias.  gl-build-app.js . Es un script propio de  core  que:  Copia los plugins definidos en la opci\u00f3n  dependencies  del  package.json  dentro de  src/main/webapp ; tambi\u00e9n copia las dependencias ( *.js  y  *.css ).  Genera el fichero  app.min.css  con  todos los estilos (de menos a m\u00e1s prioridad: dependencias,  src  y  css ).  Genera el fichero  main.js  de RequireJS que se sirve en la aplicaci\u00f3n final (solo con  debug=true ).  Genera el fichero  index.html .  Genera un fichero  build.js  para minificar m\u00f3dulos RequireJS, teniendo en cuenta la configuraci\u00f3n de  requirejs  en los  geoladris.json  de los plugins.  r.js -o build.js . Genera  src/main/webapp/app.min.js  con la minificaci\u00f3n de los recursos JavaScript a partir del  build.js  generado por  gl-build-app.js .   Los  plugins Java  se gestionan simplemente incluy\u00e9ndolos como dependencias en el  pom.xml .  El build de plugins JavaScript se incluye como parte del  build  de Maven con un plugin. Por tanto, basta con hacer  mvn package  para empaquetarlo todo.", 
            "title": "Empaquetar"
        }, 
        {
            "location": "/dev/apps/#servir", 
            "text": "Una vez desplegada la aplicaci\u00f3n  .war  en Tomcat, el  core  de Geoladris tambi\u00e9n se encarga de servir todos los recursos est\u00e1ticos (plugins empaquetados en el war, plugins en el directorio de configuraci\u00f3n, ficheros est\u00e1ticos en el directorio de configuraci\u00f3n,...) y din\u00e1micos ( config.js , ...). Son los siguientes:  Recursos est\u00e1ticos gestionados directamente por Tomcat (por estar en  src/main/webapp ):   src/main/webapp/app.min.js  src/main/webapp/app.min.css  src/main/webapp/index.html  src/main/webapp/*.js  src/main/webapp/geoladris/*   Recursos est\u00e1ticos fuera del  war . Configurado autom\u00e1ticamente para Tomcat 8.x y 9.x:   config_dir /plugins/ . Bajo el path  /plugins/* .  config_dir /static/ . Bajo el path  /static/* . Inhabilita  src/main/webapp/static .   config.js  (con un servlet), que es din\u00e1mico porque puede depender, por ejemplo, del usuario.", 
            "title": "Servir"
        }, 
        {
            "location": "/dev/migrate/", 
            "text": "Migrando a la versi\u00f3n 6.x\n\n\nA partir de la versi\u00f3n 6.0.0, todos los plugins deben contenterse en un subdirectorio con el nombre del plugin, dentro de \ngeoladris\n o \nplugins\n (en funci\u00f3n de su empaquetado; ver \nplugins\n).\n\n\nPlugins empaquetados como \n.jar\n\n\nAnteriormente, los recursos de un plugin empaquetado como jar estaban directamente dentro de \ngeoladris\n, por lo que un plugin de este tipo que funciona con la versi\u00f3n 5.0.0 no ser\u00e1 v\u00e1lido para la versi\u00f3n 6.0.0.\n\n\nPara migrar a la versi\u00f3n 6.x bastar\u00e1 con crear un subdirectorio con el nombre de nuestro plugin dentro de \ngeoladris\n y mover todos los recursos ah\u00ed.\n\n\nPor ejemplo, para un plugin empaquetado como jar, en la versi\u00f3n 5.0.0 tendr\u00edamos algo como esto:\n\n\n\n\nque deber\u00edamos transformar a:\n\n\n\n\nModuleConfigurationProviders\n\n\nEn el caso de que se hayan desarrollado \nModuleConfigurationProvider\n propios, estos deben a\u00f1adirse a la aplicaci\u00f3n de manera distinta. Anteriormente se a\u00f1ad\u00edan a un objeto \nConfig\n en un \nServletContextListener\n:\n\n\n@Override\n\n\npublic\n \nvoid\n \ncontextInitialized\n(\nServletContextEvent\n \nsce\n)\n \n{\n\n  \nConfig\n \nconfig\n \n=\n \n(\nConfig\n)\n\n    \nsce\n.\ngetServletContext\n().\ngetAttribute\n(\nAppContextListener\n.\nATTR_CONFIG\n);\n\n  \nconfig\n.\naddModuleConfigurationProvider\n(\nnew\n \nLayersModuleConfigurationProvider\n());\n\n\n}\n\n\n\n\n\n\nAhora se a\u00f1aden directamente a una lista en el \nServletContext\n:\n\n\n@SuppressWarnings\n(\nunchecked\n)\n\n\n@Override\n\n\npublic\n \nvoid\n \ncontextInitialized\n(\nServletContextEvent\n \nsce\n)\n \n{\n\n  \nList\nModuleConfigurationProvider\n \nproviders\n \n=\n \n(\nList\nModuleConfigurationProvider\n)\n\n    \nsce\n.\ngetServletContext\n().\ngetAttribute\n(\nGeoladris\n.\nATTR_CONFIG_PROVIDERS\n);\n\n  \nproviders\n.\nadd\n(\nnew\n \nLayersModuleConfigurationProvider\n());\n\n\n}\n\n\n\n\n\n\nPlugins empaquetados en el directorio de configuraci\u00f3n\n\n\nEn este caso, los plugins ya estaban dentro de un subdirectorio de \nplugins\n en la versi\u00f3n 5.x, por lo que funcionar\u00e1n en la versi\u00f3n 6.x sin ning\u00fan cambio.\n\n\nMigrando a la versi\u00f3n 7.x\n\n\nPlugins\n\n\nLa estructura de los plugins cliente ha cambiado completamente (ver \nplugins\n). Para la migraci\u00f3n habr\u00eda que:\n\n\n\n\nMover m\u00f3dulos de \nsrc/main/resources/geoladris/\nplugin\n/modules\n a \nsrc\n.\n\n\nGestionar las dependencias con \npackage.json\n/\nyarn\n.\n\n\n\n\nTodav\u00eda es posible gestionar las dependencias de manera manual (en \njslib\n en lugar de \nsrc/main/resources/geoladris/\nplugin\n/jslib\n), aunque en un futuro esta opci\u00f3n desaparecer\u00e1.\n\n\nAplicaciones\n\n\nLas dependencias de las aplicaciones se gestionan ahora conjuntamente con Maven y \nyarn\n (ver \naplicaciones\n), por lo que su definici\u00f3n y empaquetado cambian.\n\n\n\n\nIncluir dependencias cliente en \npackage.json\n.\n\n\nIncluir dependencias servidor en \npom.xml\n.\n\n\nIncluir dependencias h\u00edbridas (cliente y servidor juntos) en ambos ficheros.\n\n\nConfigurar el plugin \ncom.github.eirslett:frontend-maven-plugin\n en \npom.xml\n (ver \nejemplo\n).\n\n\n\n\nUna vez hecho esto, basta con ejecutar \nmvn package\n para minificar y empaquetar todos los recursos (cliente y servidor) en un \u00fanico paquete \n.war\n.", 
            "title": "Migraci\u00f3n"
        }, 
        {
            "location": "/dev/migrate/#migrando-a-la-version-6x", 
            "text": "A partir de la versi\u00f3n 6.0.0, todos los plugins deben contenterse en un subdirectorio con el nombre del plugin, dentro de  geoladris  o  plugins  (en funci\u00f3n de su empaquetado; ver  plugins ).", 
            "title": "Migrando a la versi\u00f3n 6.x"
        }, 
        {
            "location": "/dev/migrate/#plugins-empaquetados-como-jar", 
            "text": "Anteriormente, los recursos de un plugin empaquetado como jar estaban directamente dentro de  geoladris , por lo que un plugin de este tipo que funciona con la versi\u00f3n 5.0.0 no ser\u00e1 v\u00e1lido para la versi\u00f3n 6.0.0.  Para migrar a la versi\u00f3n 6.x bastar\u00e1 con crear un subdirectorio con el nombre de nuestro plugin dentro de  geoladris  y mover todos los recursos ah\u00ed.  Por ejemplo, para un plugin empaquetado como jar, en la versi\u00f3n 5.0.0 tendr\u00edamos algo como esto:   que deber\u00edamos transformar a:", 
            "title": "Plugins empaquetados como .jar"
        }, 
        {
            "location": "/dev/migrate/#plugins-empaquetados-en-el-directorio-de-configuracion", 
            "text": "En este caso, los plugins ya estaban dentro de un subdirectorio de  plugins  en la versi\u00f3n 5.x, por lo que funcionar\u00e1n en la versi\u00f3n 6.x sin ning\u00fan cambio.", 
            "title": "Plugins empaquetados en el directorio de configuraci\u00f3n"
        }, 
        {
            "location": "/dev/migrate/#migrando-a-la-version-7x", 
            "text": "", 
            "title": "Migrando a la versi\u00f3n 7.x"
        }, 
        {
            "location": "/dev/migrate/#plugins", 
            "text": "La estructura de los plugins cliente ha cambiado completamente (ver  plugins ). Para la migraci\u00f3n habr\u00eda que:   Mover m\u00f3dulos de  src/main/resources/geoladris/ plugin /modules  a  src .  Gestionar las dependencias con  package.json / yarn .   Todav\u00eda es posible gestionar las dependencias de manera manual (en  jslib  en lugar de  src/main/resources/geoladris/ plugin /jslib ), aunque en un futuro esta opci\u00f3n desaparecer\u00e1.", 
            "title": "Plugins"
        }, 
        {
            "location": "/dev/migrate/#aplicaciones", 
            "text": "Las dependencias de las aplicaciones se gestionan ahora conjuntamente con Maven y  yarn  (ver  aplicaciones ), por lo que su definici\u00f3n y empaquetado cambian.   Incluir dependencias cliente en  package.json .  Incluir dependencias servidor en  pom.xml .  Incluir dependencias h\u00edbridas (cliente y servidor juntos) en ambos ficheros.  Configurar el plugin  com.github.eirslett:frontend-maven-plugin  en  pom.xml  (ver  ejemplo ).   Una vez hecho esto, basta con ejecutar  mvn package  para minificar y empaquetar todos los recursos (cliente y servidor) en un \u00fanico paquete  .war .", 
            "title": "Aplicaciones"
        }, 
        {
            "location": "/dev/contribute/", 
            "text": "Lista de correo\n\n\n\n\nTODO\n\n\n\n\nReportar errores\n\n\n\n\nTODO: Issues y tags en Github\n\n\n\n\nFormateo del c\u00f3digo\n\n\nSe utiliza el \nestilo\n de Google para formatear el c\u00f3digo Java.\n\n\nPara el c\u00f3digo JavaScript se utilizan unas reglas basadas en Airbnb (\nES5\n) con ligeras modificaciones. Es posible encontrar los ficheros \n.eslintrc\n en el repositorio con las definiciones para ejecutar con \neslint\n.\n\n\nContribuir cambios\n\n\n\n\nTODO: pull requests", 
            "title": "Contribuir"
        }, 
        {
            "location": "/dev/contribute/#lista-de-correo", 
            "text": "TODO", 
            "title": "Lista de correo"
        }, 
        {
            "location": "/dev/contribute/#reportar-errores", 
            "text": "TODO: Issues y tags en Github", 
            "title": "Reportar errores"
        }, 
        {
            "location": "/dev/contribute/#formateo-del-codigo", 
            "text": "Se utiliza el  estilo  de Google para formatear el c\u00f3digo Java.  Para el c\u00f3digo JavaScript se utilizan unas reglas basadas en Airbnb ( ES5 ) con ligeras modificaciones. Es posible encontrar los ficheros  .eslintrc  en el repositorio con las definiciones para ejecutar con  eslint .", 
            "title": "Formateo del c\u00f3digo"
        }, 
        {
            "location": "/dev/contribute/#contribuir-cambios", 
            "text": "TODO: pull requests", 
            "title": "Contribuir cambios"
        }, 
        {
            "location": "/dev/eclipse/", 
            "text": "Configurar el workspace\n\n\n\n\nTODO\n\n\n\n\nFormateando el c\u00f3digo\n\n\n\n\nTODO Java\n\n\n\n\nExiste un \nfichero de estilo\n para Eclipse con algunas de las \nreglas\n de formateo de JavaScript  que utiliza el proyecto.\n\n\nPara aplicar los ficheros de estilos en Eclipse basta con descargar el fichero XML correspondiente e importarlo en Eclipse (\nPreferences\n -\n \nlang\n -\n \nCode Style\n -\n \nFormatter\n -\n \nImport...\n).\n\n\nTambi\u00e9n es posible configurar JSHint en Eclipse de forma que muestre avisos para algunos (no todos) los errores de \neslint\n:\n\n\n{\n\n  \nbrowser\n:\n \ntrue\n,\n\n  \njquery\n:\n \ntrue\n,\n\n  \nnode\n:\n \ntrue\n,\n\n  \ncamelcase\n:\n \ntrue\n,\n\n  \nindent\n:\n \n2\n,\n\n  \nlatedef\n:\n \ntrue\n,\n\n  \nmaxlen\n:\n \n100\n,\n\n  \nnewcap\n:\n \ntrue\n,\n\n  \nquotmark\n:\n \nsingle\n,\n\n  \neqeqeq\n:\n \ntrue\n,\n\n  \neqnull\n:\n \ntrue\n,\n\n  \nundef\n:\n \ntrue\n,\n\n  \nunused\n:\n \ntrue\n,\n\n  \neqnull\n:\n \ntrue\n,\n\n  \nglobals\n \n:\n \n{\n\n    \ndefine\n \n:\n \ntrue\n,\n\n    \ndescribe\n \n:\n \ntrue\n,\n\n    \nbeforeEach\n \n:\n \ntrue\n,\n\n    \nexpect\n \n:\n \ntrue\n,\n\n    \nspyOn\n \n:\n \ntrue\n,\n\n    \nit\n \n:\n \ntrue\n\n  \n}\n\n\n}\n\n\n\n\n\n\nTrucos \u00fatiles\n\n\n Script bash para filtrar los recursos \nnode*\n para los plugins\n:\n\n\nfor\n i in \n`\nfind geoladris/plugins -name .project\n`\n;\n \ndo\n\n  sed -i \ns#\n/projectDescription\n#\nfilteredResources\nfilter\nid\n`date +%s0000`\n/id\nname\n/name\ntype\n10\n/type\nmatcher\nid\norg.eclipse.ui.ide.multiFilter\n/id\narguments\n1.0-name-matches-false-false-node*\n/arguments\n/matcher\n/filter\n/filteredResources\n/projectDescription\n#g\n \n$i\n;\n\n\ndone", 
            "title": "Desarrollar con Eclipse"
        }, 
        {
            "location": "/dev/eclipse/#configurar-el-workspace", 
            "text": "TODO", 
            "title": "Configurar el workspace"
        }, 
        {
            "location": "/dev/eclipse/#formateando-el-codigo", 
            "text": "TODO Java   Existe un  fichero de estilo  para Eclipse con algunas de las  reglas  de formateo de JavaScript  que utiliza el proyecto.  Para aplicar los ficheros de estilos en Eclipse basta con descargar el fichero XML correspondiente e importarlo en Eclipse ( Preferences  -   lang  -   Code Style  -   Formatter  -   Import... ).  Tambi\u00e9n es posible configurar JSHint en Eclipse de forma que muestre avisos para algunos (no todos) los errores de  eslint :  { \n   browser :   true , \n   jquery :   true , \n   node :   true , \n   camelcase :   true , \n   indent :   2 , \n   latedef :   true , \n   maxlen :   100 , \n   newcap :   true , \n   quotmark :   single , \n   eqeqeq :   true , \n   eqnull :   true , \n   undef :   true , \n   unused :   true , \n   eqnull :   true , \n   globals   :   { \n     define   :   true , \n     describe   :   true , \n     beforeEach   :   true , \n     expect   :   true , \n     spyOn   :   true , \n     it   :   true \n   }  }", 
            "title": "Formateando el c\u00f3digo"
        }, 
        {
            "location": "/dev/eclipse/#trucos-utiles", 
            "text": "Script bash para filtrar los recursos  node*  para los plugins :  for  i in  ` find geoladris/plugins -name .project ` ;   do \n  sed -i  s# /projectDescription # filteredResources filter id `date +%s0000` /id name /name type 10 /type matcher id org.eclipse.ui.ide.multiFilter /id arguments 1.0-name-matches-false-false-node* /arguments /matcher /filter /filteredResources /projectDescription #g   $i ;  done", 
            "title": "Trucos \u00fatiles"
        }, 
        {
            "location": "/ref/changelog/", 
            "text": "This project follows \nsemantic versioning\n.\n\n\nCore - Sin publicar\n\n\nModificado\n\n\n\n\nEl proceso de empaquetado de aplicaciones ahora se gestiona con Maven y \nyarn\n conjuntamente (ver \naplicaciones\n).\n\n\nLas dependencias de los plugins cliente se gestionan ahora con \nyarn\n.\n\n\nEstructura de los plugins cliente (ver \nplugins\n).\n\n\n\n\nEliminado\n\n\n\n\nVariable de entorno \nGEOLADRIS_MINIFIED\n. Los recursos en cliente se sirven minificados por defecto, con la posibilidad de servirlos sin minificar con el par\u00e1metro \ndebug=true\n.\n\n\n\n\nCore - 6.0.0 [2017-04-21]\n\n\nModificado\n\n\n\n\nLos plugins empaquetados como \n.jar\n pasan a estar contenidos en un subdirectorio dentro de \ngeoladris\n (en lugar de directamente en \ngeoladris\n). As\u00ed, todos los plugins est\u00e1n en subdirectorios, independientemente de su empaquetado (ver \ngu\u00eda de migraci\u00f3n\n).\n\n\nTodos los plugins toman su nombre del subdirectorio en el que est\u00e1n contenidos.\n\n\ninstallInRoot\n por defecto a \nfalse\n para todos los plugins, independientemente del empaquetado; \ncore\n se mantiene con \ninstallInRoot : true\n para que sus m\u00f3dulos se puedan referenciar de manera sencilla desde otros plugins.\n\n\nModuleConfigurationProvider\n a\u00f1adidos a una lista en \nServletContext\n en lugar de a un objeto \nConfig\n (ver \ngu\u00eda de migraci\u00f3n\n).\n\n\n\n\nCorregido\n\n\n\n\nMinificaci\u00f3n no funciona para plugins con \ninstallInRoot : false\n.\n\n\nPeticiones a recursos cualificados devuelven recursos sin cualificar (y viceversa)\n.\n\n\nNullPointerException\n cuando alg\u00fan \nModuleConfigurationProvider\n devuelve configuraci\u00f3n para un plugin no existente.\n\n\nBug con ficheros CSS llamados igual que el directorio que los contiene (\nstyles/styles.css\n, \nmodules/modules.css\n, \ntheme/theme.css\n) en plugins con \ninstallInRoot:false\n.\n\n\n\n\nA\u00f1adido\n\n\n\n\nScript (\ngeoladris_build.sh\n) para generar paquetes \n.war\n a partir de un descriptor \nbuild.json\n y un directorio de configuraci\u00f3n.\n\n\nPosibilidad de obtener la configuraci\u00f3n desde una base de datos, tanto configuraci\u00f3n de plugins (\npublic-conf.json\n) como propiedades (\nportal.properties\n) y mensajes (\nmessages/messages*.properties\n).\n\n\nPosibilidad de a\u00f1adir m\u00f3dulos en subdirectorios\n.\n\n\nDetectar cambios en los directorios de plugins\n.\n\n\nFichero descriptor de plugin (\nplugin\n-conf.json\n) opcional\n.\n\n\nVariable \nGEOLADRIS_CACHE_TIMEOUT\n (en segundos) para limpiar la cach\u00e9 de configuraci\u00f3n. \u00danicamente se tiene en cuenta si la variable \nGEOLADRIS_CONFIG_CACHE\n es \ntrue\n.\n\n\nM\u00e9todo \nPortalRequestConfiguration.getCurrentConfiguration()\n para poder modificar desde un \nModuleConfigurationProvider\n la configuraci\u00f3n en construcci\u00f3n, obtenida de los \nModuleConfigurationProvider\n previos.\n\n\n\n\nCore - 5.0.1 [2016-12-06]\n\n\nCorregido\n\n\n\n\nDevolver \nContent-type\n correcto para im\u00e1genes SVG\n.\n\n\n\n\nCore - 5.0.0 [2016-11-25]\n\n\nCorregido\n\n\n\n\nEspecificar \narrays\n JSON como configuraci\u00f3n de los m\u00f3dulos\n.\n\n\nSoporte para Java 8\n.\n\n\nEnviar al cliente \u00fanicamente las propiedades bien conocidas\n.\n\n\nPosibilidad de tener un directorio de configuraci\u00f3n distinto por aplicaci\u00f3n\n.\n\n\n\n\nA\u00f1adido\n\n\n\n\nNuevo descriptor de aplicaci\u00f3n \npublic-conf.json\n. Permite activar y desactivar plugins. Sustituye a \nplugin-conf.json\n, que se mantiene temporalmente por compatibilidad hacia atr\u00e1s.\n\n\nMezclar la configuraci\u00f3n por defecto de los plugins y no s\u00f3lo de sobreescribirla.\n\n\nEspecificar \nconfiguraci\u00f3n espec\u00edfica de usuario\n.\n\n\nA\u00f1adir plugins (s\u00f3lo parte cliente) en el directorio de configuraci\u00f3n.\n\n\nCualificar los m\u00f3dulos con el nombre del plugin al que pertenecen (\ninstallInRoot:false\n).\n\n\nDirectorio \ntheme\n en los plugins. Contiene ficheros CSS con el estilo de la aplicaci\u00f3n.\n\n\nPar\u00e1metro \ndebug\n que carga los m\u00f3dulos sin minificaci\u00f3n.\n\n\nEspecificar el t\u00edtulo del documento HTML en el fichero \nportal.properties\n.\n\n\n\n\nModificado\n\n\n\n\nEl soporte para el fichero \nlayers.json\n se ha movido al plugin \nbase\n.\n\n\nEl directorio \nnfms\n que contiene los recursos se ha renombrado a \ngeoladris\n.\n\n\n\n\nBugs conocidos\n\n\n\n\nMinificaci\u00f3n no funciona para plugins con installInRoot:false\n.\n\n\nEs posible cargar recursos instalados en la ra\u00edz como si pertenecieran a un plugin inexistente.\n.", 
            "title": "Registro de cambios"
        }, 
        {
            "location": "/ref/changelog/#core-sin-publicar", 
            "text": "", 
            "title": "Core - Sin publicar"
        }, 
        {
            "location": "/ref/changelog/#modificado", 
            "text": "El proceso de empaquetado de aplicaciones ahora se gestiona con Maven y  yarn  conjuntamente (ver  aplicaciones ).  Las dependencias de los plugins cliente se gestionan ahora con  yarn .  Estructura de los plugins cliente (ver  plugins ).", 
            "title": "Modificado"
        }, 
        {
            "location": "/ref/changelog/#eliminado", 
            "text": "Variable de entorno  GEOLADRIS_MINIFIED . Los recursos en cliente se sirven minificados por defecto, con la posibilidad de servirlos sin minificar con el par\u00e1metro  debug=true .", 
            "title": "Eliminado"
        }, 
        {
            "location": "/ref/changelog/#core-600-2017-04-21", 
            "text": "", 
            "title": "Core - 6.0.0 [2017-04-21]"
        }, 
        {
            "location": "/ref/changelog/#modificado_1", 
            "text": "Los plugins empaquetados como  .jar  pasan a estar contenidos en un subdirectorio dentro de  geoladris  (en lugar de directamente en  geoladris ). As\u00ed, todos los plugins est\u00e1n en subdirectorios, independientemente de su empaquetado (ver  gu\u00eda de migraci\u00f3n ).  Todos los plugins toman su nombre del subdirectorio en el que est\u00e1n contenidos.  installInRoot  por defecto a  false  para todos los plugins, independientemente del empaquetado;  core  se mantiene con  installInRoot : true  para que sus m\u00f3dulos se puedan referenciar de manera sencilla desde otros plugins.  ModuleConfigurationProvider  a\u00f1adidos a una lista en  ServletContext  en lugar de a un objeto  Config  (ver  gu\u00eda de migraci\u00f3n ).", 
            "title": "Modificado"
        }, 
        {
            "location": "/ref/changelog/#corregido", 
            "text": "Minificaci\u00f3n no funciona para plugins con  installInRoot : false .  Peticiones a recursos cualificados devuelven recursos sin cualificar (y viceversa) .  NullPointerException  cuando alg\u00fan  ModuleConfigurationProvider  devuelve configuraci\u00f3n para un plugin no existente.  Bug con ficheros CSS llamados igual que el directorio que los contiene ( styles/styles.css ,  modules/modules.css ,  theme/theme.css ) en plugins con  installInRoot:false .", 
            "title": "Corregido"
        }, 
        {
            "location": "/ref/changelog/#anadido", 
            "text": "Script ( geoladris_build.sh ) para generar paquetes  .war  a partir de un descriptor  build.json  y un directorio de configuraci\u00f3n.  Posibilidad de obtener la configuraci\u00f3n desde una base de datos, tanto configuraci\u00f3n de plugins ( public-conf.json ) como propiedades ( portal.properties ) y mensajes ( messages/messages*.properties ).  Posibilidad de a\u00f1adir m\u00f3dulos en subdirectorios .  Detectar cambios en los directorios de plugins .  Fichero descriptor de plugin ( plugin -conf.json ) opcional .  Variable  GEOLADRIS_CACHE_TIMEOUT  (en segundos) para limpiar la cach\u00e9 de configuraci\u00f3n. \u00danicamente se tiene en cuenta si la variable  GEOLADRIS_CONFIG_CACHE  es  true .  M\u00e9todo  PortalRequestConfiguration.getCurrentConfiguration()  para poder modificar desde un  ModuleConfigurationProvider  la configuraci\u00f3n en construcci\u00f3n, obtenida de los  ModuleConfigurationProvider  previos.", 
            "title": "A\u00f1adido"
        }, 
        {
            "location": "/ref/changelog/#core-501-2016-12-06", 
            "text": "", 
            "title": "Core - 5.0.1 [2016-12-06]"
        }, 
        {
            "location": "/ref/changelog/#corregido_1", 
            "text": "Devolver  Content-type  correcto para im\u00e1genes SVG .", 
            "title": "Corregido"
        }, 
        {
            "location": "/ref/changelog/#core-500-2016-11-25", 
            "text": "", 
            "title": "Core - 5.0.0 [2016-11-25]"
        }, 
        {
            "location": "/ref/changelog/#corregido_2", 
            "text": "Especificar  arrays  JSON como configuraci\u00f3n de los m\u00f3dulos .  Soporte para Java 8 .  Enviar al cliente \u00fanicamente las propiedades bien conocidas .  Posibilidad de tener un directorio de configuraci\u00f3n distinto por aplicaci\u00f3n .", 
            "title": "Corregido"
        }, 
        {
            "location": "/ref/changelog/#anadido_1", 
            "text": "Nuevo descriptor de aplicaci\u00f3n  public-conf.json . Permite activar y desactivar plugins. Sustituye a  plugin-conf.json , que se mantiene temporalmente por compatibilidad hacia atr\u00e1s.  Mezclar la configuraci\u00f3n por defecto de los plugins y no s\u00f3lo de sobreescribirla.  Especificar  configuraci\u00f3n espec\u00edfica de usuario .  A\u00f1adir plugins (s\u00f3lo parte cliente) en el directorio de configuraci\u00f3n.  Cualificar los m\u00f3dulos con el nombre del plugin al que pertenecen ( installInRoot:false ).  Directorio  theme  en los plugins. Contiene ficheros CSS con el estilo de la aplicaci\u00f3n.  Par\u00e1metro  debug  que carga los m\u00f3dulos sin minificaci\u00f3n.  Especificar el t\u00edtulo del documento HTML en el fichero  portal.properties .", 
            "title": "A\u00f1adido"
        }, 
        {
            "location": "/ref/changelog/#modificado_2", 
            "text": "El soporte para el fichero  layers.json  se ha movido al plugin  base .  El directorio  nfms  que contiene los recursos se ha renombrado a  geoladris .", 
            "title": "Modificado"
        }, 
        {
            "location": "/ref/changelog/#bugs-conocidos", 
            "text": "Minificaci\u00f3n no funciona para plugins con installInRoot:false .  Es posible cargar recursos instalados en la ra\u00edz como si pertenecieran a un plugin inexistente. .", 
            "title": "Bugs conocidos"
        }, 
        {
            "location": "/ref/plugins/", 
            "text": "Documentaci\u00f3n de referencia de la configuraci\u00f3n de los plugins (obtenida con \nmodule.config()\n).", 
            "title": "Plugins"
        }, 
        {
            "location": "/ref/events/", 
            "text": "Documentaci\u00f3n de referencia de todos los eventos de los plugins. Pensar c\u00f3mo organizar esto (por plugins, por eventos y decir qu\u00e9 plugins utilizan qu\u00e9, con una tabla, etc.)", 
            "title": "Eventos"
        }
    ]
}